/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const EMagicFlags_MAGIC_FLAG_NONE: EMagicFlags = 0;
pub const EMagicFlags_MAGIC_FLAG_BIGENDIAN: EMagicFlags = 1;
pub const EMagicFlags_MAGIC_FLAG_64BIT: EMagicFlags = 2;
pub const EMagicFlags_MAGIC_FLAG_EXTRA16: EMagicFlags = 4;
#[doc = "Current known magic flags"]
pub type EMagicFlags = ::std::os::raw::c_int;
#[doc = "Informations about gr2 magic"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SMagicInfo {
    pub flags: u8,
    pub magic: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_SMagicInfo() {
    assert_eq!(
        ::std::mem::size_of::<SMagicInfo>(),
        20usize,
        concat!("Size of: ", stringify!(SMagicInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SMagicInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(SMagicInfo))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<SMagicInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SMagicInfo),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_magic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<SMagicInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magic) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(SMagicInfo),
                "::",
                stringify!(magic)
            )
        );
    }
    test_field_magic();
}
#[doc = "Informations about gr2 magic"]
pub type TMagicInfo = SMagicInfo;
extern "C" {
    #[doc = "Global holder of magic info"]
    pub static mut MAGIC_DATA: [TMagicInfo; 0usize];
}
extern "C" {
    #[doc = "Gets the information of a magic"]
    #[doc = "@param magic the magic to test"]
    #[doc = "@flags a pointer that returns the magic info"]
    #[doc = "@return true if the magic exists, otherwise false"]
    pub fn Magic_GetFlags(magic: *const u32, flags: *mut u8) -> bool;
}
extern "C" {
    pub fn Magic_Set(magic: *mut u32, flags: u8);
}
