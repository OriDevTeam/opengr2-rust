/* automatically generated by rust-bindgen 0.60.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const false_: u32 = 0;
pub const true_: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const ECompressionTypes_COMPRESSION_TYPE_NONE: ECompressionTypes = 0;
pub const ECompressionTypes_COMPRESSION_TYPE_OODLE0: ECompressionTypes = 1;
pub const ECompressionTypes_COMPRESSION_TYPE_OODLE1: ECompressionTypes = 2;
pub const ECompressionTypes_COMPRESSION_TYPE_BITKNIT1: ECompressionTypes = 3;
pub const ECompressionTypes_COMPRESSION_TYPE_BITKNIT2: ECompressionTypes = 4;
#[doc = "@enum ECompressionTypes"]
#[doc = "Currently known compression types"]
pub type ECompressionTypes = ::std::os::raw::c_int;
extern "C" {
    #[doc = "Gets the extra bytes that needs to be allocated for the specific compression"]
    #[doc = "@param nType the compression type"]
    #[doc = "@return the extra bytes to allocate"]
    pub fn Compression_GetExtraLen(nType: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Decompresses data with algorithm Oodle-1"]
    #[doc = "@param compressedData the compressed data to decompress"]
    #[doc = "@param compressedLength length of the compressed data"]
    #[doc = "@param decompressedData A buffer which will store the decompressed data"]
    #[doc = "@param decompressedLength length of the decompressed data"]
    #[doc = "@param oodleStop1 first stop byte of oodle"]
    #[doc = "@param oodleStop2 second stop byte of oodle"]
    #[doc = "@param endianessMismatch if the file has a different endianess"]
    #[doc = "@return true if the decompression succeeded, otherwise false"]
    pub fn Compression_UnOodle1(
        compressedData: *mut u8,
        compressedLength: u32,
        decompressedData: *mut u8,
        decompressedLength: u32,
        oodleStop1: u32,
        oodleStop2: u32,
        endianessMismatch: bool,
    ) -> bool;
}
